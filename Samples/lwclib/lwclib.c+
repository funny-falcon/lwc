#include "lwclib.h"

extern "sys/mman.h" {
#include <sys/mman.h>
}
extern "sys/stat.h" {
#include <sys/stat.h>
}
extern "fcntl.h" {
#include <fcntl.h>
}
extern "sys/types.h" {
#include <sys/types.h>
}
extern "stdlib.h" {
#include <stdlib.h>
}
extern "stdio.h" {
#include <stdio.h>
}
extern "unistd.h" {
#include <unistd.h>
}
extern "string.h" {
#include <string.h>
}


mmap_file.ctor (char *file)
{
	data = 0;
	success = false;
	fd = -1;

	stat statbuf;
	if (stat (file, &statbuf) == -1)
		return;
	if ((len = statbuf.st_size) == -1)
		return;
	if ((fd = open (file, $O_RDONLY)) == -1)
		return;

	data = (char*) mmap (0, len, $PROT_READ, $MAP_PRIVATE, fd, 0);
	success = data != $MAP_FAILED;
}

mmap_file.dtor ()
{
	if (success)
		munmap (data, len);
	if (fd != -1)
		close (fd);
}

/******************************************************************************

	The Integer Tree

******************************************************************************/

intTree.intTree ()
{
	cnt = 0;
	root = 0;
	FoundSlot = 0;
}

intNode *intTree.intFind (unsigned int q)
{
	Query = q;

	intNode *n;

	if (!(n = root)) {
		FoundSlot = &root;
		return 0;
	}

	FoundSlot = 0;

	unsigned int bt;
	for (bt = 1; bt; bt *= 2) {
		if (n->Key == q) return n;
		if (q & bt)
			if (n->less) n = n->less;
			else {
				FoundSlot = &n->less;
				return 0;
			}
		else
			if (n->more) n = n->more;
			else {
				FoundSlot = &n->more;
				return 0;
			}
	}

	return 0;
}

void intTree.addself (intNode n)
{
	*FoundSlot = &n;
	++cnt;
	FoundSlot = 0;
	n.Key = Query;
}

intNode.intNode (intTree i)
{
	i.addself (this);

	less = more = 0;
}

void intTree.intRemove (intNode *i)
{
	unsigned int isroot, bt = 0;
	intNode *n = root;
	unsigned int Key = i->Key;

	if (!(isroot = n == i))
		for (bt = 1; bt; bt *= 2)
			if (Key & bt)	// avoid braces like hell
				if (n->less != i) n = n->less;
				else break;
			else		// yes but why?
				if (n->more != i) n = n->more;
				else break;
	else;

	if (!i->less && !i->more)
		if (isroot) root = 0;
		else
			if (Key & bt) n->less = 0;
			else n->more = 0;
	else {
		intNode *r = i, *rp = 0;
		while (r->more || r->less) {
			rp = r;
			r = (r->more) ? r->more : r->less;
		}
		if (isroot) root = r;
		else
			if (Key & bt) n->less = r;
			else n->more = r;
		if (rp->more == r) rp->more = 0;
		else rp->less = 0;
		r->more = i->more;
		r->less = i->less;
	}
}

/***************************************************************************
	Walk inttree
***************************************************************************/

void foreach_intNode.walktree (intNode n)
{
	if (n.less) walktree (n.less);
	if (n.more) walktree (n.more);
	Do (n);
}

foreach_intNode.ctor (intTree t)
{
	if (t.root) walktree (t.root);
}

/******************************************************************************
	Dynamic Binary Search Tree.
	Check dbstree.tex for info.
******************************************************************************/

dbsTree.dbsTree ()
{
	nnodes = 0;
	root = NULL;
	FoundSlot = NULL;
}

void dbsTree.tree_to_array (dbsNode n)
{
	if (n.less) tree_to_array (n.less);
	*FoundSlot++ = &n;
	if (n.more) tree_to_array (n.more);
}

void dbsTree.dbsBalance ()		// O(n)
{
	dbsNode **npp;
	unsigned long long i, j, k, D, Y, k2, k3;

	if (!root) return;

	npp = FoundSlot = (dbsNode**) malloc (sizeof (dbsNode*) * nnodes);
	tree_to_array (root);

	root = npp [nnodes / 2];
	for (D = nnodes + 1, i = 4; i <= D; i *= 2)
		for (j = 2; j < i; j += 4)
		{
			k3 = nnodes * j / i;
			npp [k3]->less = npp [nnodes * (j - 1) / i],
			npp [k3]->more = npp [nnodes * (j + 1) / i];
		}
	k = nnodes + 1 - (Y = i / 2);
	if (k == 0)
	{
		for (i /=2, j = 1; j < i; j += 2)
			k3 = nnodes * j / i,
			npp [k3]->less = npp [k3]->more = NULL;
		return;
	}

	for (j = 2; j < i; j += 4)
	{
		k3 = nnodes * j / i;
		D = (k2 = (j - 1) * nnodes / i) * Y % nnodes;
		if (D >= k || D == 0)
			npp [k3]->less = NULL;
		else
		{
			npp [k3]->less = npp [k2];
			npp [k2]->less = npp [k2]->more = NULL;
		}
		D = (k2 = (j + 1) * nnodes / i) * Y % nnodes;
		if (D >= k || D == 0)
			npp [k3]->more = NULL;
		else
		{
			npp [k3]->more = npp [k2];
			npp [k2]->less = npp [k2]->more = NULL;
		}
	}

	dbsNode *np;
	for (np = root; np->less; np = np->less);

	np->less = npp [0];
	npp [0]->less = npp [0]->more = NULL;

	free (npp);
}

void dbsTree.addself (dbsNode t)
{
	t.less = t.more = 0;
	*FoundSlot = &t;
	++nnodes;

	if (FoundDepth >= DBS_MAGIC)
		dbsBalance ();
	FoundSlot = NULL;	// Bug traper
}

void dbsTree.dbsRemove (dbsNode *t)		// O(log n)
{
	dbsNode *np, *nl, *nr, *nlp, *nrp;
	int isroot;
	unsigned int i, j;

	isroot = (np = parentOf (t)) == 0;

	--nnodes;

	if (!(t->less && t->more))
	{
		if (isroot)
			root = t->less ?: t->more;
		else
			if (np->less == t)
				np->less = t->less ?: t->more;
			else
				np->more = t->less ?: t->more;
		return;
	}

	for (i = 0, nlp = 0, nl = t->less; nl->more; i++)
		nlp = nl, nl = nl->more;
	for (j = 0, nrp = 0, nr = t->more; nr->less; j++)
		nrp = nr, nr = nr->less;

	if (i >= j)		// the smallest from bigger ones
	{
		if (isroot) root = nl;
		else
			if (np->less == t) np->less = nl;
			else np->more = nl;
		if (nlp)
		{
			nlp->more = nl->less;
			nl->less = t->less;
		}
		nl->more = t->more;
	}
	else	// Mirror situation
	{
		if (isroot) root = nr;
		else
			if (np->less == t) np->less = nr;
			else np->more = nr;
		if (nrp)
		{
			nrp->less = nr->more;
			nr->more = t->more;
		}
		nr->less = t->less;
	}
}

dbsNode *dbsTree.parentOf (dbsNode *t) const		// O(log n)
{
	dbsNode *np;

	if ((np = root) == t)
		return 0;

	while (np)
		if (compare (t, np) < 0)
			if (np->less == t) break;
			else np = np->less;
		else
			if (np->more == t) break;
			else np = np->more;

	return np;
}

dbsNode *dbsTree.dbsNext (dbsNode *d)
{
	if (!root) return 0;

	if (d->more) {
		d = d->more;
		while (d->less) d = d->less;
		return d;
	}

	while (1) {
		dbsNode *p = parentOf (d);
		if (!p) return 0;
		if (p->more != d)
			return p;
		d = p;
	}
}

dbsNode *dbsTree.dbsPrev (dbsNode *d)
{
	if (!root) return 0;

	if (d->less) {
		d = d->less;
		while (d->more) d = d->more;
		return d;
	}

	while (1) {
		dbsNode *p = parentOf (d);
		if (!p) return 0;
		if (p->less != d)
			return p;
		d = p;
	}
}
/********************************************************************

	tree of strings

********************************************************************/

int dbsTreeStr.compare (const dbsNode n1, const dbsNode n2) const
{
	dbsNodeStr *s1 = (dbsNodeStr*) &n1, *s2 = (dbsNodeStr*) &n2;
	return strcmp (s1->str, s2->str);
}

int dbsTreeStr.compare (const dbsNode n) const
{
	dbsNodeStr *s = (dbsNodeStr*) &n;
	return strcmp (s->str, Query);
}

dbsNodeStr *dbsTreeStr.dbsFind (char *s)
{
	Query = s;
	return (dbsNodeStr*) (*(dbsTreeStr*)this).dbsFind ();
}
/********************************************************************

	Walk through dbsTrees

********************************************************************/

dbsForEach.dbsForEach (dbsTree t)
{
	if (t.root) walktree (t.root);
}

void dbsForEach_Inorder.walktree (dbsNode n)
{
	if (n.less) walktree (n.less);
	Do (n);
	if (n.more) walktree (n.more);
}

void dbsForEach_Preorder.walktree (dbsNode n)
{
	Do (n);
	if (n.less) walktree (n.less);
	if (n.more) walktree (n.more);
}

void dbsForEach_Postorder.walktree (dbsNode n)
{
	if (n.less) walktree (n.less);
	if (n.more) walktree (n.more);
	Do (n);
}

